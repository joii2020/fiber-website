---
import Layout from "../../layouts/Layout.astro";
---

<Layout>
  <div class="p-5 md:p-20">
    <div
      class="bg-cyan rounded-xl p-8 mx-auto border-1 border-border-black text-center mb-6"
    >
      <h2>A Basic Example: Two Nodes Transfer</h2>
    </div>

    <div class="space-y-8 text-body1">
      <section class="space-y-4">
        <h3>Overview</h3>
        <p>
          This guide walks you through setting up and executing a basic token
          (CKB) transfer between two nodes in the Fiber network. This is a
          fundamental example that demonstrates the core functionality of the
          Fiber Channel Network.
        </p>
      </section>

      <section class="space-y-4">
        <h3>Prerequisites</h3>
        <ul class="list-disc pl-6 space-y-2">
          <li>Two Fiber Network Nodes (FNN) instances running</li>
          <li>Basic understanding of command line operations</li>
          <li>curl or similar HTTP client for making RPC calls</li>
        </ul>
      </section>

      <section class="space-y-4">
        <h3>Setting Up Your Nodes</h3>
        <div class="space-y-4">
          <h4>1. Prepare Fiber Binary</h4>
          <p>
            Download the latest release binary from the <a
              href="https://github.com/nervosnetwork/fiber/releases"
              class="text-blue-500">Fiber GitHub Releases</a
            > page.
          </p>
          <p>
            If you prefer to build the binary by yourself, you will need to
            install Rust and Cargo:
          </p>
          <pre>
            <code>
git clone https://github.com/nervosnetwork/fiber.git
cd fiber
cargo build --release
            </code>
          </pre>

          <h4>2. Create Data Directories</h4>
          <p>Set up separate directories for each node:</p>
          <pre>
            <code>
{`# For Node 1
mkdir node1
cp target/release/fnn node1/
cp config/testnet/config.yml node1/

# For Node 2
mkdir node2
cp target/release/fnn node2/
cp config/testnet/config.yml node2/`}</code>
          </pre>

          <h4>3. Configure Node Keys</h4>
          <p>Each node needs its own private key for signing transactions:</p>
          <pre>
            <code>
{`# In each node directory
mkdir ckb
# Use ckb-cli to export or generate keys
ckb-cli account export --lock-arg <lock_arg> --extended-privkey-path ./ckb/exported-key
head -n 1 ./ckb/exported-key > ./ckb/key`}</code>
          </pre>

          <h4>4. Configure Ports</h4>
          <p>Edit the config.yml files to use different ports for each node:</p>
          <ul class="list-disc pl-6">
            <li>Node 1: Port 8227</li>
            <li>Node 2: Port 8238</li>
          </ul>
        </div>
      </section>

      <section class="space-y-4">
        <h3>Step-by-Step Transfer Process</h3>

        <div class="space-y-4">
          <h4>1. Start Both Nodes</h4>
          <pre>
            <code>
{`# Start Node 1
cd node1
RUST_LOG=info ./fnn -c config.yml -d .

# Start Node 2 (in a different terminal)
cd node2
RUST_LOG=info ./fnn -c config.yml -d .`}</code>
          </pre>

          <h4>2. Connect the Nodes</h4>
          <p>Establish a connection between Node 1 and Node 2:</p>
          <pre>
            <code>
{`curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "id": "42",
    "jsonrpc": "2.0",
    "method": "connect_peer",
    "params": [
      {"address": "/ip4/127.0.0.1/tcp/8238/p2p/QmcFpUnjRvMyqbFBTn94wwF8LZodvPWpK39Wg9pYr2i4TQ"}
    ]
  }' \\
  http://localhost:8227`}</code>
          </pre>

          <h4>3. Open a Payment Channel</h4>
          <p>Create a payment channel from Node 1 to Node 2:</p>
          <pre>
            <code>
{`curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "id": "42",
    "jsonrpc": "2.0",
    "method": "open_channel",
    "params": [{
      "peer_id": "QmcFpUnjRvMyqbFBTn94wwF8LZodvPWpK39Wg9pYr2i4TQ",
      "funding_amount": "0xba43b7400",
      "commitment_delay_epoch": "0x20001000003"
    }]
  }' \
  http://localhost:8227`}</code>
          </pre>

          <h4>4. Generate an Invoice</h4>
          <p>Create a payment invoice on Node 2 for 100 CKB:</p>
          <pre>
            <code>
{`curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "id": "42",
    "jsonrpc": "2.0",
    "method": "new_invoice",
    "params": [{
      "amount": "0x2540be400",
      "currency": "Fibt",
      "description": "test invoice generated by node1",
      "expiry": "0xe10",
      "final_cltv": "0x28",
      "payment_preimage": "0x26b069707aec100fd7153f26abe2bea9e32ed0a6ec1b7e3dcd47aa0e684a1412",
      "hash_algorithm": "sha256"
    }]
  }' \\
  http://localhost:8237`}</code>
          </pre>

          <h4>5. Make the Payment</h4>
          <p>Send payment from Node 1 to Node 2 using the generated invoice:</p>
          <pre>
            <code>
{`curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "id": "42",
    "jsonrpc": "2.0",
    "method": "send_payment",
    "params": [{
      "invoice": "fibt100000000001p..."  # Use the invoice string from step 4
    }]
  }' \
  http://localhost:8227`}</code>
          </pre>

          <h4>6. Verify the Transfer</h4>
          <p>Check the channel balance to confirm the transfer:</p>
          <pre>
            <code>
{`curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "id": "42",
    "jsonrpc": "2.0",
    "method": "list_channels",
    "params": [{
      "peer_id": "QmcFpUnjRvMyqbFBTn94wwF8LZodvPWpK39Wg9pYr2i4TQ"
    }]
  }' \\
  http://localhost:8227`}</code>
          </pre>
        </div>
      </section>

      <section class="space-y-4">
        <h3>Closing the Channel</h3>
        <p>When you're done with the payment channel, you can close it:</p>
        <pre>
            <code>
{`curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{
    "id": "42",
    "jsonrpc": "2.0",
    "method": "shutdown_channel",
    "params": [{
      "channel_id": "0xcc0b319e3b1155196a4ffc6c2f71205493befee742f9bdd3ef0e11db4a9bbdac",
      "close_script": {
        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
        "hash_type": "type",
        "args": "0x4d4ae843f62f05bf1ac601b3dbd43b5b4f9a006a"
      },
      "fee_rate": "0x3FC"
    }]
  }' \
  http://localhost:8227`}</code>
          </pre>
      </section>

      <section class="space-y-4">
        <h3>Important Notes</h3>
        <ul class="list-disc pl-6 space-y-2">
          <li>
            Always ensure both nodes are properly synced before attempting
            transfers
          </li>
          <li>Keep track of your channel IDs and peer IDs</li>
          <li>Monitor your node logs for any errors or important messages</li>
          <li>
            Make sure to properly close channels when they're no longer needed
          </li>
        </ul>
      </section>
    </div>
  </div>
</Layout>
